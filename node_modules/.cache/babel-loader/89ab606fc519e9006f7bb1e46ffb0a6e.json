{"ast":null,"code":"var pushdata = require('pushdata-bitcoin');\n\nvar varuint = require('varuint-bitcoin'); // https://github.com/feross/buffer/blob/master/index.js#L1127\n\n\nfunction verifuint(value, max) {\n  if (typeof value !== 'number') throw new Error('cannot write a non-number as a number');\n  if (value < 0) throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n}\n\nfunction readUInt64LE(buffer, offset) {\n  var a = buffer.readUInt32LE(offset);\n  var b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\n\nfunction readInt64LE(buffer, offset) {\n  var a = buffer.readUInt32LE(offset);\n  var b = buffer.readInt32LE(offset + 4);\n  b *= 0x100000000;\n  return b + a;\n}\n\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n} // TODO: remove in 4.0.0?\n\n\nfunction readVarInt(buffer, offset) {\n  var result = varuint.decode(buffer, offset);\n  return {\n    number: result,\n    size: varuint.decode.bytes\n  };\n} // TODO: remove in 4.0.0?\n\n\nfunction writeVarInt(buffer, number, offset) {\n  varuint.encode(number, buffer, offset);\n  return varuint.encode.bytes;\n}\n\nmodule.exports = {\n  pushDataSize: pushdata.encodingLength,\n  readPushDataInt: pushdata.decode,\n  readUInt64LE: readUInt64LE,\n  readInt64LE: readInt64LE,\n  readVarInt: readVarInt,\n  varIntBuffer: varuint.encode,\n  varIntSize: varuint.encodingLength,\n  writePushDataInt: pushdata.encode,\n  writeUInt64LE: writeUInt64LE,\n  writeVarInt: writeVarInt\n};","map":null,"metadata":{},"sourceType":"script"}